pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "e-library/e-library:latest"
        DOCKER_CONTAINER = "e-library"
        PORT_MAPPING = "8090:80"
    }

    stages {
        stage("Checkout") {
            steps {
                deleteDir()
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[url: 'https://github.com/AmaCrisn/E-Library-Project.git',
                    credentialsId: 'df2555e3-e5be-4025-85ed-90840a92ad98']]
                ])
            }
        }
        stage("Cleanup") {
            steps {
                script {
                    def existingContainer = sh(script: "docker ps -aq --filter name=${env.DOCKER_CONTAINER}", returnStdout: true).trim()
                    if (existingContainer) {
                        sh "docker rm -f ${existingContainer}"
                    }
                }
            }
        }
        stage("Build Docker Image") {
            steps {
                script {
                    docker.build(env.DOCKER_IMAGE)
                }
            }
        }
        stage("Run Docker Container") {
            steps {
                script {
                    docker.image(env.DOCKER_IMAGE).run("-d --name ${env.DOCKER_CONTAINER} -p ${env.PORT_MAPPING}")
                }
            }
        }
    }
}